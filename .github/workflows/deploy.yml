name: Build and Deploy to Digital Ocean

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: your-dockerhub-username/joke-generator
  CONTAINER_NAME: joke-generator-app

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run security scan
      uses: docker/scout-action@v1
      with:
        command: cves
        image: ${{ steps.meta.outputs.tags }}
        only-severities: critical,high
        exit-code: true

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Digital Ocean Droplet
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: ${{ secrets.DO_PORT || 22 }}
        script: |
          # Create deployment directory
          mkdir -p /opt/joke-generator
          cd /opt/joke-generator

          # Download deployment files
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3.raw" \
               -o docker-compose.yml \
               https://api.github.com/repos/${{ github.repository }}/contents/docker-compose.yml

          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3.raw" \
               -o nginx.conf \
               https://api.github.com/repos/${{ github.repository }}/contents/nginx.conf

          # Set environment variables
          echo "DOCKER_IMAGE=${{ env.DOCKER_IMAGE }}:latest" > .env
          echo "FLASK_ENV=production" >> .env

          # Update docker-compose.yml to use the built image
          sed -i 's/build: \.$/image: ${{ env.DOCKER_IMAGE }}:latest/' docker-compose.yml

          # Pull latest image
          docker pull ${{ env.DOCKER_IMAGE }}:latest

          # Stop existing containers
          docker-compose down || true

          # Start new containers
          docker-compose --profile production up -d

          # Clean up old images
          docker image prune -f

          # Health check
          sleep 30
          curl -f http://localhost/health || curl -f http://localhost/ || exit 1

          echo "Deployment completed successfully!"

  notify:
    needs: [build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      if: always() && secrets.SLACK_WEBHOOK